name: Deploy dev and feature branches

on:
  schedule:
    - cron: '30 * * * *' # Run once every hour, at xx:30
  workflow_dispatch:     # Allow triggering manually

jobs:
  find-prs-to-deploy:
    name: Find PRs and branches to deploy or uninstall
    runs-on: ubuntu-latest
    outputs:
      to-uninstall: ${{ steps.to-uninstall.outputs.list }}
      to-deploy: ${{ steps.to-deploy.outputs.mapping }}
    steps:

      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2

      # TODO skip deploying dev if CI on the corresponding commit was not successful
      - name: Find all open PRs that have a "deploy!" label, plus devel
        id: deployment-candidates
        # create a JSON map like:
        # {
        #  "pr1234": {"name": "pr1234", "env": "feature-branch", "sha": "... commit sha ..."},
        #  "dev": {"name": "dev", "env": "dev", "sha": "..."}
        # }
        run: |
          DEVEL=$(printf '{"dev":{"name":"dev","env":"dev","sha":"%s"}}' $(git rev-parse devel))
          PULL_REQUESTS=$(curl -X POST --location "https://api.github.com/graphql" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.REPO_ACCESS_TOKEN }}" \
            -d "{\"query\": \"query { search(query: \\\"is:open is:pr label:deploy! repo:ecamp/ecamp3\\\", type: ISSUE, first: 100) { edges { node { ... on PullRequest { number headRefOid } } } } }\"}")
          MAPPING=$(printf "$PULL_REQUESTS" | jq '.data.search.edges' \
            | jq 'map({("pr"+(.node.number|tostring)):{"name":("pr"+(.node.number|tostring)),env:"feature-branch",sha:.node.headRefOid}})|add' \
            | jq ".+$DEVEL")
          echo "Deployment candidates: $MAPPING"
          echo ::set-output name=mapping::$MAPPING

      - name: Read the list of all currently active deployments
        id: current-deployments
        run: |
          # Setup authentication
          mkdir ~/.kube && echo '${{ secrets.KUBECONFIG }}' > ~/.kube/config && chmod go-r ~/.kube/config
          # Read list of deployments using helm, and remove the leading ecamp3- from each of the names.
          # Creates a list of objects like [{"name": "pr1234", "sha": "... commit sha ..."}, {"name": "dev", "sha": "..."}]
          LIST=$(helm list -o json | jq 'map(.name|=sub("^ecamp3-";""))' | jq 'map({name:.name,sha:.app_version})')
          echo "Currently active deployments: $LIST"
          echo ::set-output name=list::$LIST

      - name: List deployments without PR
        id: to-uninstall
        env:
          deployments: ${{ toJSON(fromJSON(steps.current-deployments.outputs.list).*.name) }}
          prs: ${{ toJSON(fromJSON(steps.deployment-candidates.outputs.mapping).*.name) }}
        run: |
          TO_UNINSTALL=$(printf '{}' | jq --argjson prs '${{ env.prs }}' --argjson deployments '${{ env.deployments }}' '$deployments-$prs')
          echo "Will uninstall: $TO_UNINSTALL"
          echo ::set-output name=list::$TO_UNINSTALL

      - name: List PRs without up-to-date deployment
        id: to-deploy
        env:
          deployments: ${{ steps.current-deployments.outputs.list }}
          prs: ${{ steps.deployment-candidates.outputs.mapping }}
        run: |
          TO_INSTALL=$(printf '{}' | jq --argjson prs '${{ env.prs }}' --argjson deployments '${{ env.deployments }}' \
            '$prs|with_entries(select([{name:.value.name,sha:.value.sha}]|inside($deployments)|not))')
          echo "Will install the following candidates, because they either aren't deployed or their deployment is out of date: $TO_INSTALL"
          echo ::set-output name=mapping::$TO_INSTALL

  uninstall-old-deployment:
    name: Uninstall old deployment
    runs-on: ubuntu-latest
    needs:
      - find-prs-to-deploy
    if: fromJSON(needs.find-prs-to-deploy.outputs.to-uninstall)[0] != null
    strategy:
      fail-fast: false
      matrix:
        deployment-name: ${{ fromJSON(needs.find-prs-to-deploy.outputs.to-uninstall) }}
    steps:

      - name: Uninstall helm release
        run: |
          # Setup authentication
          mkdir ~/.kube && echo '${{ secrets.KUBECONFIG }}' > ~/.kube/config && chmod go-r ~/.kube/config
          # Uninstall the release
          helm delete ecamp3-${{ matrix.deployment-name }}

      - name: Remove GitHub deployment
        uses: bobheadxi/deployments@v0.6.2
        with:
          step: deactivate-env
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          env: ${{ matrix.deployment-name }}

  upgrade-or-install-deployment:
    name: Upgrade or install deployment
    runs-on: ubuntu-latest
    needs:
      - find-prs-to-deploy
    if: (fromJSON(needs.find-prs-to-deploy.outputs.to-deploy).*)[0] != null
    strategy:
      fail-fast: false
      matrix:
        deployment: ${{ fromJSON(needs.find-prs-to-deploy.outputs.to-deploy).* }}
    environment:
      name: ${{ matrix.deployment.env }}
    steps:

      - name: Create a pending GitHub deployment
        uses: bobheadxi/deployments@v0.6.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          env: ${{ matrix.deployment.name }}

      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2
        with:
          ref: ${{ matrix.deployment.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push frontend docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          file: .docker-hub/frontend/Dockerfile
          tags: 'ecamp/ecamp3-frontend:latest,ecamp/ecamp3-frontend:${{ matrix.deployment.sha }}'
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push api docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          file: api/Dockerfile
          tags: 'ecamp/ecamp3-api:latest,ecamp/ecamp3-api:${{ matrix.deployment.sha }}'
          context: './api'
          target: api_platform_php
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push caddy docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          file: api/Dockerfile
          tags: 'ecamp/ecamp3-caddy:latest,ecamp/ecamp3-caddy:${{ matrix.deployment.sha }}'
          context: './api'
          target: api_platform_caddy_prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push print docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          file: .docker-hub/print/Dockerfile
          tags: 'ecamp/ecamp3-print:latest,ecamp/ecamp3-print:${{ matrix.deployment.sha }}'
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upgrade or install helm release
        run: |
          # Setup authentication
          mkdir ~/.kube && echo '${{ secrets.KUBECONFIG }}' > ~/.kube/config && chmod go-r ~/.kube/config
          # Switch to the helm chart directory
          cd .helm/ecamp3
          # Install dependency charts
          helm dependency update
          # Set the appVersion, workaround from https://github.com/helm/helm/issues/8194 so that we can
          # later find out which deployments need to be upgraded
          sed -i 's/^appVersion:.*$/appVersion: "${{ matrix.deployment.sha }}"/' Chart.yaml
          # Install or upgrade the release
          helm upgrade --install ecamp3-${{ matrix.deployment.name }} . \
            --set imageTag=${{ matrix.deployment.sha }} \
            --set sharedCookieDomain=.ecamp3.ch \
            --set api.domain=api-${{ matrix.deployment.name }}.ecamp3.ch \
            --set frontend.domain=${{ matrix.deployment.name }}.ecamp3.ch \
            --set print.domain=print-${{ matrix.deployment.name }}.ecamp3.ch \
            --set mail.domain=mail-${{ matrix.deployment.name }}.ecamp3.ch \
            --set postgresql.enabled=false \
            --set postgresql.url='${{ format(secrets.POSTGRES_URL, matrix.deployment.name) }}' \
            --set postgresql.adminUrl='${{ format(secrets.POSTGRES_ADMIN_URL, matrix.deployment.name) }}' \
            --set php.appSecret='${{ secrets.API_APP_SECRET }}' \
            --set php.jwt.passphrase='${{ secrets.JWT_PASSPHRASE }}' \
            --set php.jwt.publicKey='${{ secrets.JWT_PUBLIC_KEY }}' \
            --set php.jwt.privateKey='${{ secrets.JWT_PRIVATE_KEY }}' \
            --set frontend.sentryDsn='${{ secrets.FRONTEND_SENTRY_DSN }}' \
            --set print.sentryDsn='${{ secrets.PRINT_SENTRY_DSN }}' \
            --set deploymentTime="$(date -u +%s)" \
            --set deployedVersion="$(git rev-parse --short '${{ matrix.deployment.sha }}')"

      - name: Finish the GitHub deployment
        uses: bobheadxi/deployments@v0.6.2
        if: always()
        with:
          step: finish
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ matrix.deployment.name }}.ecamp3.ch
